package com.redhat.bpms.examples.mortgage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
/**
 * This class was automatically generated by the data modeler tool.
 */
@org.kie.api.definition.type.Label(value = "Mortgage Application")
public class Application  implements java.io.Serializable {

static final long serialVersionUID = 1L;
    
    @org.kie.api.definition.type.Label(value = "Validation Errors")
    @org.kie.api.definition.type.Position(value = 7)
    private java.util.List<com.redhat.bpms.examples.mortgage.ValidationError> validationErrors;
    
    @org.kie.api.definition.type.Label(value = "Mortgage Interest APR")
    @org.kie.api.definition.type.Position(value = 6)
    private java.lang.Double apr;
    
    @org.kie.api.definition.type.Label(value = "Mortgage Amount")
    @org.kie.api.definition.type.Position(value = 5)
    private java.lang.Integer mortgageAmount;
    
    @org.kie.api.definition.type.Label(value = "Applicant")
    @org.kie.api.definition.type.Position(value = 0)
    private com.redhat.bpms.examples.mortgage.Applicant applicant;
    
    @org.kie.api.definition.type.Label(value = "Mortgage Amortization")
    @org.kie.api.definition.type.Position(value = 4)
    private java.lang.Integer amortization;
    
    @org.kie.api.definition.type.Label(value = "Down Payment")
    @org.kie.api.definition.type.Position(value = 3)
    private java.lang.Integer downPayment;
    
    @org.kie.api.definition.type.Label(value = "Property")
    @org.kie.api.definition.type.Position(value = 1)
    private com.redhat.bpms.examples.mortgage.Property property;
    
    @org.kie.api.definition.type.Label(value = "Appraisal")
    @org.kie.api.definition.type.Position(value = 2)
    private com.redhat.bpms.examples.mortgage.Appraisal appraisal;

    public Application() {
    }

    public Application(com.redhat.bpms.examples.mortgage.Applicant applicant, com.redhat.bpms.examples.mortgage.Property property, com.redhat.bpms.examples.mortgage.Appraisal appraisal, java.lang.Integer downPayment, java.lang.Integer amortization, java.lang.Integer mortgageAmount, java.lang.Double apr, java.util.List<com.redhat.bpms.examples.mortgage.ValidationError> validationErrors) {
        this.applicant = applicant;
        this.property = property;
        this.appraisal = appraisal;
        this.downPayment = downPayment;
        this.amortization = amortization;
        this.mortgageAmount = mortgageAmount;
        this.apr = apr;
        this.validationErrors = validationErrors;
    }


    
    public java.util.List<com.redhat.bpms.examples.mortgage.ValidationError> getValidationErrors() {
        return this.validationErrors;
    }

    public void setValidationErrors(  java.util.List<com.redhat.bpms.examples.mortgage.ValidationError> validationErrors ) {
        this.validationErrors = validationErrors;
    }
    
    public java.lang.Double getApr() {
        return this.apr;
    }

    public void setApr(  java.lang.Double apr ) {
        this.apr = apr;
    }
    
    public java.lang.Integer getMortgageAmount() {
        return this.mortgageAmount;
    }

    public void setMortgageAmount(  java.lang.Integer mortgageAmount ) {
        this.mortgageAmount = mortgageAmount;
    }
    
    public com.redhat.bpms.examples.mortgage.Applicant getApplicant() {
        System.out.println("applicant In Get"+this.applicant);
        return this.applicant;
    }

    public void setApplicant(  com.redhat.bpms.examples.mortgage.Applicant applicant ) {
        this.applicant = applicant;
    }
    
    public java.lang.Integer getAmortization() {
        return this.amortization;
    }

    public void setAmortization(  java.lang.Integer amortization ) {
        this.amortization = amortization;
    }
    
    public java.lang.Integer getDownPayment() {
        return this.downPayment;
    }

    public void setDownPayment(  java.lang.Integer downPayment ) {
        this.downPayment = downPayment;
    }
    
    public com.redhat.bpms.examples.mortgage.Property getProperty(){
        
	 return this.property;
    }

    public void setProperty(  com.redhat.bpms.examples.mortgage.Property property ) {
        this.property = property;
    }
    
    public com.redhat.bpms.examples.mortgage.Appraisal getAppraisal() {
        return this.appraisal;
    }

    public void setAppraisal(  com.redhat.bpms.examples.mortgage.Appraisal appraisal ) {
        this.appraisal = appraisal;
    }
    
public void storeApplication()  throws SQLException {
    
    String str1=getApplicant().toString();
			System.out.println(str1);
        String [] arr = str1.split("=");
 
	String[] income=  arr[2].split(",");
	  System.out.println(income[0]);
	  String[] name=  arr[3].split(",");
	  System.out.println(name[0]);
	  String[] ssnNum=  arr[4].split("]");
	  System.out.println(ssnNum[0]);
		   Connection c = null;
		      Statement stmt = null;
		      ResultSet rs=null;
		      ResultSet rs1=null;
		     int app_id=0;
		     int pro_id=0;
		      try
		      {
		         Class.forName("org.postgresql.Driver");
		      }
		      catch (ClassNotFoundException e)
		      {
		         e.printStackTrace();
		      }
		try{
		       c = DriverManager.getConnection("jdbc:postgresql://localhost:5432/mytest", "postgres", "espl@2017");
		       System.out.println("After  Driver");
		       stmt = c.createStatement();
		    
		      String sql="INSERT INTO Applicant (Applicant_id,Name,SSNumber,Annual_Income)values(DEFAULT,'"+name[0]+"','"+ssnNum[0]+"',"+income[0]+");";
		      System.out.println(sql);
		      stmt.executeUpdate(sql);
		    
		      String sql1= " SELECT Applicant_id FROM Applicant WHERE Applicant_id=(select max(Applicant_id) from Applicant)";
		      System.out.println(sql1);
		      rs=stmt.executeQuery(sql1);
			
			while ( rs.next() ) 
			  {
				app_id=rs.getInt("Applicant_id");
				System.out.println(rs.getInt("Applicant_id"));
			  }
		      
		      
               String property="INSERT INTO Property (Property_id,Address,Sale_Price,App_id)values(DEFAULT,'"+"pune"+"','"+50000+"',"+app_id+");";
		       System.out.println(property);
		       stmt.executeUpdate(property);
		       
		       String property1= " SELECT Property_id FROM Property WHERE Property_id=(select max(Property_id) from Property)";
			      System.out.println(property1);
			      rs1=stmt.executeQuery(property1);
				
				while ( rs1.next() ) 
				  {
					pro_id=rs1.getInt("Property_id");
					System.out.println(rs1.getInt("Property_id"));
				  }
		       
		       String payment="INSERT INTO Payment (Down_Payment,Amortization,App_id,Pro_id)values("+getDownPayment()+","+getAmortization()+","+app_id+","+pro_id+");";
		       System.out.println(payment);
		       stmt.executeUpdate(payment);
		} catch (SQLException e)
		      {
		         e.printStackTrace();
		      }finally{
		       rs.close();
		       rs1.close();
		       c.close();
		       stmt.close();
	     
		      }
	   
}
	@Override
	public String toString()
	{
		return "Application [validationErrors=" + validationErrors + ", apr=" + apr + ", mortgageAmount=" + mortgageAmount + ", applicant="
				+ applicant + ", amortization=" + amortization + ", downPayment=" + downPayment + ", property=" + property + ", appraisal="
				+ appraisal + "]";
	}




}